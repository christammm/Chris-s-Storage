/ Standard Instruction Set Horizontal Microcode  k.has

/ The label indicates the opcode decoded up to that point.  
/ Each hex digit in a label represents 4 bits.  0 or 1 in a 
/ label represents the bits 0 and 1.  For example, the 
/ label LF_01 corresponds to opcode bits 1111 01; the label 
/ LF_2 corresponds to opcode bits 1111 0010. 

/***************************************************************/
/     Fetch instruction and increment pc register               /
/***************************************************************/
fetch:      mar = pc; pc = pc + 1;
            rd;                   
            ir = mdr;
/***************************************************************/
/           Decode opcode                                       /
/***************************************************************/
            dc = ir; if(s) goto L1;
L0:         dc = left(dc); if (s) goto L01; 
L00:        dc = left(dc); if (s) goto L001; 
L000:       dc = left(dc); if (s) goto L0001; 
            goto L0000;
L1:         dc = left(dc); if (s) goto L11; 
L10:        dc = left(dc); if (s) goto L101; 
L100:       dc = left(dc); if (s) goto L9; 
            goto L8;
L01:        dc = left(dc); if (s) goto L011; 
L010:       dc = left(dc); if (s) goto L5; 
            goto L4;          
L11:        dc = left(dc); if (s) goto L111; 
L110:       dc = left(dc); if (s) goto LD; 
            goto LC;
L001:       dc = left(dc); if (s) goto L3; 
            goto L2;
L011:       dc = left(dc); if (s) goto L7; 
            goto L6;
L101:       dc = left(dc); if (s) goto LB; 
            goto LA;
L111:       dc = left(dc); if (s) goto LF; 
            goto LE;

LF:         dc = left(dc); if (s) goto LF_1; 
LF_0:       dc = left(dc); if (s) goto LF_01; 
LF_00:      dc = left(dc); if (s) goto LF_001; 
LF_000:     dc = left(dc); if (s) goto LF_0001;
            goto LF_0000;
LF_1:       dc = left(dc); if (s) goto LF_11; 
LF_10:      dc = left(dc); if (s) goto LF_101; 
LF_100:     dc = left(dc); if (s) goto LF_9;
            goto LF_8;
LF_01:      dc = left(dc); if (s) goto LF_011; 
LF_010:     dc = left(dc); if (s) goto LF_5;
            goto LF_4;
LF_11:      dc = left(dc); if (s) goto LF_111; 
LF_110:     dc = left(dc); if (s) goto LF_D;
            goto LF_C;
LF_001:     dc = left(dc); if (s) goto LF_3;
            goto LF_2;
LF_011:     dc = left(dc); if (s) goto LF_7;
            goto LF_6;
LF_101:     dc = left(dc); if (s) goto LF_B;
            goto LF_A;
LF_111:     dc = left(dc); if (s) goto LF_F;
            goto LF_E;

LF_F:       dc = left(dc); if (s) goto LF_F_1;
LF_F_0:     dc = left(dc); if (s) goto LF_F_01;
LF_F_00:    dc = left(dc); if (s) goto LF_F_001;
LF_F_000:   dc = left(dc); if (s) goto LF_F_0001;
            goto LF_F_0000;
LF_F_1:     dc = left(dc); if (s) goto LF_F_11
LF_F_10:    dc = left(dc); if (s) goto LF_F_101;
LF_F_100:   dc = left(dc); if (s) goto LF_F_9;
            goto LF_F_8;
LF_F_01:    dc = left(dc); if (s) goto LF_F_011;
LF_F_010:   dc = left(dc); if (s) goto LF_F_5;
            goto LF_F_4;
LF_F_11:    dc = left(dc); if (s) goto LF_F_111
LF_F_110:   dc = left(dc); if (s) goto LF_F_D;
            goto LF_F_C;
LF_F_001:   dc = left(dc); if (s) goto LF_F_3;
            goto LF_F_2;
LF_F_011:   dc = left(dc); if (s) goto LF_F_7;
            goto LF_F_6;
LF_F_101:   dc = left(dc); if (s) goto LF_F_B;
            goto LF_F_A;
LF_F_111:   dc = left(dc); if (s) goto LF_F_F;
            goto LF_F_E;

/*********** Modified LF_F_F for k instruction SET/

LF_F_F:       dc = left(dc); if (s) goto LF_F_F_1;
LF_F_F_0:     dc = left(dc); if (s) goto LF_F_F_01;
LF_F_F_00:    dc = left(dc); if (s) goto LF_F_F_001;
LF_F_F_000:   dc = left(dc); if (s) goto LF_F_F_0001;
            goto LF_F_F_0000;
LF_F_F_1:     dc = left(dc); if (s) goto LF_F_F_11
LF_F_F_10:    dc = left(dc); if (s) goto LF_F_F_101;
LF_F_F_100:   dc = left(dc); if (s) goto LF_F_F_9;
            goto LF_F_F_8;
LF_F_F_01:    dc = left(dc); if (s) goto LF_F_F_011;
LF_F_F_010:   dc = left(dc); if (s) goto LF_F_F_5;
            goto LF_F_F_4;
LF_F_F_11:    dc = left(dc); if (s) goto LF_F_F_111
LF_F_F_110:   dc = left(dc); if (s) goto LF_F_F_D;
            goto LF_F_F_C;
LF_F_F_001:   dc = left(dc); if (s) goto LF_F_F_3;
            goto LF_F_F_2;
LF_F_F_011:   dc = left(dc); if (s) goto LF_F_F_7;
            goto LF_F_F_6;
LF_F_F_101:   dc = left(dc); if (s) goto LF_F_F_B;
            goto LF_F_F_A;
LF_F_F_111:   dc = left(dc); if (s) goto LF_F_F_F;
            goto LF_F_F_E;


/***************************************************************/
/           Microcode for each instruction                      /
/***************************************************************/

L0000:      /------------------------- P ----------------------
                  mar = ir; rd; // mem[x]
                  temp = mdr; // temp = mem[x]
                  mar = sp; sp = sp - 1; // 
                  rd;
                  mdr = temp; wr;
                  goto fetch; // mem[sp--] = mem[x]

L0001:      /------------------------- PC -----------------------
                  mar = sp; sp = sp - 1;
                  rd;
                  mdr = ir; wr;
                  goto fetch; 

L2:         /------------------------- PR ----------------------
	            mar= ir; rd;
	            temp = mdr;
			temp = temp + bp;
			mar = sp; sp = sp - 1; 
			mdr = temp; wr;
			goto fetch;
			
			
L3:         /------------------------- CORA ----------------------

L4:         /------------------------- ASPC ----------------------

L5:         /------------------------- CALL ----------------------

L6:         /------------------------- JA ---------------------

L7:         /------------------------- JCNT ---------------------

L8:         /------------------------- JP ----------------------

L9:         /------------------------- JN -----------------------

LA:         /------------------------- JZ ---------------------

LB:         /------------------------- JNZ -----------------------

LC:         /------------------------- JODD -----------------------

LD:         /------------------------- JZON ----------------------

LE:         /------------------------- JZOP ---------------------

LF_0000:    /------------------------- RET ----------------------
                 
LF_0001:    /------------------------- ADD ----------------------

LF_2:       /------------------------- SUB ----------------------
                      
LF_3:       /------------------------- STAV ---------------------
                          
LF_4:       /------------------------- STVA ----------------------
                    
LF_5:       /------------------------- LOAD ---------------------
                
LF_6:       /------------------------- ADDC ---------------------
                
LF_7:       /------------------------- SUBC ---------------------
                     
LF_8:       /------------------------- DUPE ---------------------
			mar= sp; sp=sp-1;
			rd;
			mar=sp;
			wr;
LF_9:       /------------------------- ESBA ---------------------

LF_A:       /------------------------- REBA ---------------------

LF_B:       /------------------------- ZESP ---------------------

LF_C:       /------------------------- SCMP ---------------------

LF_D:       /------------------------- UCMP ---------------------

LF_E:       /------------------------- REV  ---------------------

LF_F_0000:  /------------------------- SHLL ---------------------

LF_F_0001:  /------------------------- SHRL ---------------------

LF_F_2:     /------------------------- SHRA ---------------------

LF_F_3:     /-------------------------  M   ---------------------

LF_F_4:     /------------------------- MULT ---------------------

LF_F_5:     /------------------------- DIV  ---------------------

LF_F_6:     /------------------------- REM  ---------------------

LF_F_7:     /------------------------- ADDY ---------------------

LF_F_8:     /-------------------------  OR  ---------------------

LF_F_9:     /------------------------- XOR  ---------------------

LF_F_A:     /------------------------- AND  ---------------------

LF_F_B:     /------------------------- FLIP ---------------------

LF_F_C:     /------------------------- CALI ---------------------

LF_F_D:     /------------------------- SECT ---------------------

LF_F_E:     /-------------------------  ROT ---------------------

LF_F_F_0000:/------------------------- PSP  ---------------------

LF_F_F_0001:/------------------------- BPBP ---------------------

LF_F_F_2:   /------------------------- POBP ---------------------

LF_F_F_3:   /------------------------- PBP  ---------------------

LF_F_F_4:   /------------------------- BCPY --------------------- // DECODE OPERATORS NEEDED AFTER THIS POINT

LF_F_F_5:   /------------------------- UOUT --------------------

LF_F_F_6:   /------------------------- SIN ---------------------

LF_F_F_7:   /------------------------- SOUT ---------------------

LF_F_F_8:   /------------------------- HIN  ---------------------

LF_F_F_9:   /------------------------- HOUT ---------------------

LF_F_F_A:   /------------------------- AIN  ---------------------

LF_F_F_B:   /------------------------- AOUT ---------------------

LF_F_F_C:   /------------------------- DIN  ---------------------

LF_F_F_D:   /------------------------- DOUT ---------------------

LF_F_F_E:   /------------------------- BKPT ---------------------

LF_F_F_F:   /------------------------- HALT ---------------------



            goto fetch;